{"version":3,"sources":["components/TodoInput.js","components/TodoList.js","components/App.js","index.js"],"names":["TodoInput","state","todo","inputRef","React","createRef","submitHandler","e","preventDefault","_this","props","addTodoItem","setState","this","current","focus","_this2","react_default","a","createElement","onSubmit","className","type","value","onChange","target","ref","placeholder","Component","TodoList","_ref","items","remove","toggleCompleted","renderedList","style","listStyle","map","item","index","key","checked","completed","id","textDecoration","marginLeft","onClick","length","react","App","todoItems","serialNum","newList","concat","Object","toConsumableArray","prevState","removeTodoItem","filter","console","log","components_TodoInput","components_TodoList","ReactDOM","render","components_App","document","querySelector"],"mappings":"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","file":"static/js/main.c4842dc9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TodoInput extends Component {\n    state = {\n        todo: ''\n    };\n\n    inputRef = React.createRef();\n\n    submitHandler = e => {\n        e.preventDefault();\n        this.props.addTodoItem(this.state.todo);\n        this.setState({ todo: '' });\n    }\n\n    componentDidUpdate() {\n        this.inputRef.current.focus();\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submitHandler}>\n                <div className=\"control\">\n                    <input \n                        type=\"text\" \n                        className=\"input\"\n                        value={this.state.todo} \n                        onChange={e => this.setState({todo: e.target.value})} \n                        ref={this.inputRef}\n                        placeholder=\"Add todo item...\"\n                    />\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default TodoInput;","import React, { Fragment } from 'react';\n\nconst TodoList = ({ items, remove, toggleCompleted }) => {\n\n    let renderedList = <div className=\"content\">\n        <ul style={{ listStyle: 'none' }}>\n            {items.map((item, index) => (\n                    <li key={index}>\n                        <label>\n                            <input type=\"checkbox\" checked={item.completed} onChange={() => toggleCompleted(item.id, item.todo)} /> &nbsp;\n                        <span\n                                className=\"is-size-5\"\n                                style={{ textDecoration: item.completed ? 'line-through' : 'none' }}\n                            >\n                                {item.todo}\n                            </span>\n                        </label>\n                        <button\n                            className=\"button is-danger is-small is-rounded is-outlined\"\n                            style={{ marginLeft: '.5rem' }}\n                            onClick={() => remove(item.id)}\n                        >\n                            Delete &times;\n                    </button>\n                    </li>\n                )\n            )}\n        </ul>\n    </div>;\n\n    if (items.length === 0) {\n        renderedList = <div className=\"section\">Your todo list is empty.</div>\n    }\n\n    return (\n        <Fragment>\n            {renderedList}\n        </Fragment>\n    );\n}\n\nexport default TodoList;","import React, { Component } from 'react';\n\nimport TodoInput from './TodoInput';\nimport TodoList from './TodoList';\n\nclass App extends Component {\n\n    state = {\n        todoItems: [],\n        serialNum: 0\n    };\n\n    addTodoItem = (todo) => {\n        const newList = [...this.state.todoItems, { id: this.state.serialNum + 1, todo: todo, completed: false }];\n        this.setState(prevState => ({\n            todoItems: newList,\n            serialNum: prevState.serialNum + 1\n        }));\n    };\n\n    removeTodoItem = id => {\n        const newList = [...this.state.todoItems].filter(item => item.id !== id);\n\n        this.setState({\n            todoItems: newList\n        });\n    };\n\n    toggleCompleted = id => {\n        this.setState({\n            todoItems: this.state.todoItems.map(item => {\n                if (item.id === id) {\n                    item.completed = !item.completed;\n                }\n                return item;\n            })\n        });\n    };\n\n    render() {\n        console.log(this.state);\n        return (\n            <div className=\"section\">\n                <div className=\"container\">\n                    <h1 className=\"title\">Todo List</h1>\n                    <TodoInput addTodoItem={this.addTodoItem} />\n                    <TodoList\n                        items={this.state.todoItems}\n                        remove={this.removeTodoItem}\n                        toggleCompleted={this.toggleCompleted}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n);"],"sourceRoot":""}