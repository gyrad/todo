{"version":3,"sources":["components/TodoInput.js","components/TodoList.js","components/App.js","index.js"],"names":["TodoInput","state","todo","inputRef","React","createRef","submitHandler","e","preventDefault","_this","props","addTodoItem","setState","this","current","focus","_this2","react_default","a","createElement","onSubmit","className","type","value","onChange","target","ref","placeholder","Component","TodoList","_ref","items","remove","toggleCompleted","setVisibility","visibility","btnStyle","margin","renderedList","concat","style","onClick","listStyle","filter","item","completed","map","index","key","checked","id","textDecoration","marginLeft","length","console","log","react","App","todoItems","serialNum","newList","Object","toConsumableArray","prevState","removeTodoItem","components_TodoInput","components_TodoList","ReactDOM","render","components_App","document","querySelector"],"mappings":"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","file":"static/js/main.454cb84f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TodoInput extends Component {\n    state = {\n        todo: ''\n    };\n\n    inputRef = React.createRef();\n\n    submitHandler = e => {\n        e.preventDefault();\n        this.props.addTodoItem(this.state.todo);\n        this.setState({ todo: '' });\n    }\n\n    componentDidUpdate() {\n        this.inputRef.current.focus();\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submitHandler}>\n                <div className=\"control\">\n                    <input \n                        type=\"text\" \n                        className=\"input\"\n                        value={this.state.todo} \n                        onChange={e => this.setState({todo: e.target.value})} \n                        ref={this.inputRef}\n                        placeholder=\"Add todo item...\"\n                    />\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default TodoInput;","import React, { Fragment } from 'react';\n\nconst TodoList = ({ items, remove, toggleCompleted, setVisibility, visibility }) => {\n\n    const btnStyle = {margin: '1rem .5rem 0 0'};\n\n    let renderedList = (\n        <div className=\"content\">\n            <button \n                className={`button is-small is-light ${(visibility === 'all') ? 'is-info' : ''}`} \n                style={btnStyle}\n                onClick={() => setVisibility('all')}\n            >\n                All\n            </button>\n            <button \n                className={`button is-small is-light ${(visibility === 'active') ? 'is-info' : ''}`} \n                style={btnStyle}\n                onClick={() => setVisibility('active')}\n            >\n                Active\n            </button>\n            <button \n                className={`button is-small is-light ${(visibility === 'completed') ? 'is-info' : ''}`} \n                style={btnStyle}\n                onClick={() => setVisibility('completed')}\n            >\n                Completed\n            </button>\n\n            <ul style={{ listStyle: 'none' }}>\n                {items.filter(item => {\n                    if (visibility === 'active') {\n                        return !item.completed\n                    } else if (visibility === 'completed') {\n                        return item.completed\n                    }\n                    return item;\n                }).map((item, index) => (\n                        <li key={index}>\n                            <label>\n                                <input type=\"checkbox\" checked={item.completed} onChange={() => toggleCompleted(item.id, item.todo)} /> &nbsp;\n                            <span\n                                    className=\"is-size-5\"\n                                    style={{ textDecoration: item.completed ? 'line-through' : 'none' }}\n                                >\n                                    {item.todo}\n                                </span>\n                            </label>\n                            <button\n                                className=\"button is-danger is-small is-rounded is-outlined\"\n                                style={{ marginLeft: '.5rem' }}\n                                onClick={() => remove(item.id)}\n                            >\n                                Delete &times;\n                        </button>\n                        </li>\n                    )\n                )}\n            </ul>\n        </div>\n    );\n\n    if (items.length === 0) {\n        renderedList = <div className=\"section\">Your todo list is empty.</div>\n    }\n\n\n    console.log(items);\n    return (\n        <Fragment>\n            {renderedList}\n        </Fragment>\n    );\n}\n\nexport default TodoList;","import React, { Component } from 'react';\n\nimport TodoInput from './TodoInput';\nimport TodoList from './TodoList';\n\nclass App extends Component {\n\n    state = {\n        todoItems: [],\n        serialNum: 0,\n        visibility: 'all'\n    };\n\n    addTodoItem = (todo) => {\n        const newList = [...this.state.todoItems, { id: this.state.serialNum + 1, todo: todo, completed: false }];\n        this.setState(prevState => ({\n            todoItems: newList,\n            serialNum: prevState.serialNum + 1\n        }));\n    };\n\n    removeTodoItem = id => {\n        const newList = [...this.state.todoItems].filter(item => item.id !== id);\n\n        this.setState({\n            todoItems: newList\n        });\n    };\n\n    toggleCompleted = id => {\n        this.setState({\n            todoItems: this.state.todoItems.map(item => {\n                if (item.id === id) {\n                    item.completed = !item.completed;\n                }\n                return item;\n            })\n        });\n    };\n\n    setVisibility = visibility => {\n        this.setState({\n            visibility\n        });\n    }\n\n    render() {\n        console.log(this.state);\n        return (\n            <div className=\"section\">\n                <div className=\"container\">\n                    <h1 className=\"title\">Todo List</h1>\n                    <TodoInput addTodoItem={this.addTodoItem} />\n                    <TodoList\n                        items={this.state.todoItems}\n                        remove={this.removeTodoItem}\n                        toggleCompleted={this.toggleCompleted}\n                        setVisibility={this.setVisibility}\n                        visibility={this.state.visibility}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n);"],"sourceRoot":""}